open build/C
open build/OCaml
open build/LaTeX

open Ant

DefineCommandVars()

OCamlPackageModules(package, modules) =
  # compile the modules with "-for-pack"
  OCAMLFLAGS += -for-pack $(package)

  foreach(m, $(modules))
    $(m).cmx $(m).o:
    $(m).cmo:
    $(m).cmi:

OCamlPackageCopy(tag, dir, package) =
  private.dest = $(dir)/$(basename $(package))

  foreach(suf, cmo cmx cmi o)
    $(dest).$(suf): $(package).$(suf)
      ln-or-cp $< $@

  if $(NATIVE_ENABLED)
    $(tag): $(dest).cmx $(dest).cmi $(dest).o
  else
    $(tag): $(dest).cmo $(dest).cmi

OCamlDependsOnLibrary(library) =
  if $(NATIVE_ENABLED)
    .SCANNER: scan-ocaml-%: $(library).cmxa $(library).cmi $(library).a
    .SCANNER: %.cmi:        $(library).cmxa $(library).cmi $(library).a
    .SCANNER: %.cmx %.cmo:  $(library).cmxa $(library).cmi $(library).a
    export
  else
    .SCANNER: scan-ocaml-%: $(library).cma $(library).cmi
    .SCANNER: %.cmi:        $(library).cma $(library).cmi
    .SCANNER: %.cmx %.cmo:  $(library).cma $(library).cmi
    export
  export

OCamlDependsOnPackage(package) =
  if $(NATIVE_ENABLED)
    .SCANNER: scan-ocaml-%: $(package).cmx $(package).cmi $(package).o
    .SCANNER: %.cmi:        $(package).cmx $(package).cmi $(package).o
    .SCANNER: %.cmx %.cmo:  $(package).cmx $(package).cmi $(package).o
    export
  else
    .SCANNER: scan-ocaml-%: $(package).cmo $(package).cmi
    .SCANNER: %.cmi:        $(package).cmo $(package).cmi
    .SCANNER: %.cmx %.cmo:  $(package).cmo $(package).cmi
    export
  export

.SUBDIRS: .

# vim:set ft=make:
